- name: Check if pihole is installed.
  stat:
    path: /usr/local/bin/pihole
  register: pihole

- name: Make sure pihole folder exists
  file:
    path: /etc/pihole
    state: directory

- name: Download pihole installer
  get_url:
    url: https://install.pi-hole.net
    dest: '/home/{{ ansible_ssh_user }}/pihole_install.sh'
    mode: '0770'
    owner: '{{ ansible_ssh_user }}'
  when: pihole.stat.exists == False

- name: Handle web controller password 
  block:
  - name: Check current pihole web panel password
    template:
      src: webpassword.j2
      dest: /etc/pihole/webpassword.txt
    register: pihole_pwd
    failed_when: false
  - name: Check current pihole web panel password hash
    command: grep 'pwhash = ' /etc/pihole/pihole.toml
    register: pihole_webpwd
    changed_when: pihole_webpwd.rc != 0
    failed_when: false

  - set_fact: 
      pihole_pwdhash: "{{ pihole_webpwd.stdout.split('=')[1] | default('')}}"
    when: not pihole_webpwd.changed

# Order in real file frequently changes the order, this step prevents it from changing each run.
- name: Test pihole configuration.
  template:
    src: pihole.toml.j2
    dest: /etc/pihole/pihole.test.toml
  register: pihole_config

- name: Update pihole configuration.
  template: 
    src: pihole.toml.j2
    dest: /etc/pihole/pihole.toml
  when: pihole_config.changed
  notify: restart pihole

- name: Install pihole
  shell: '/bin/bash /home/{{ ansible_ssh_user }}/pihole_install.sh --unattended'
  when: pihole.stat.exists == False

- name: Set the web panel password
  command: "pihole -a -p {{ pihole_password }}"
  when: pihole_pwd.changed or pihole_webpwd.changed
  no_log: true
  notify: restart pihole

- block:
  - name: Ensure sqlite3 is installed.
    apt:
      name: sqlite3
      state: present
  - name: Fetch list of domains currently allowed
    command: sqlite3 /etc/pihole/gravity.db "select domain from domainlist;" ".exit"
    register: domain_allow_list
    changed_when: false
  rescue: 
  - name: Generate empty list domain exceptions
    command: echo ''
    register: domain_allow_list
    changed_when: false
  always:
  - name: Update domain exception/bypass list
    include_tasks: exception.yml
    with_items: '{{ pihole_domain_exceptions }}'
  when: 'pihole_domain_exceptions | length > 0'

- name: Update pihole
  command: /usr/local/bin/pihole -up
  notify:
    - restart pihole
  register: update_pihole
  changed_when: update_pihole.rc != 0

- name: Add cronjob for updating lists
  cron:
    hour: "04"
    minute: "00"
    name: update pihole
    job: /usr/local/bin/pihole -up
  
- name: Add cronjob for updating gravity
  cron:
    hour: "04"
    minute: "15"
    name: update gravity
    job: /usr/local/bin/pihole -g

- include_tasks: certs.yml
  when: pihole_https_enable