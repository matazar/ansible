# Create empty var to hold all our domains.
- set_fact: 
    unifi_domains: []

# Create a list of domains that need to be included in our wildcard cert
- set_fact:
    unifi_domains: '{{ unifi_domains + ["*."+item.split(".")[-2:] | join(".")] }}'
  with_items: '{{ unifi_network_domains }}'

# Output the domains
- name: Output domains we need included in the wildcard cert.
  debug:
    var: unifi_domains | unique

# Actually run certbot
- include_role:
    name: certbot_dns
  vars:
    cert_name: "{{ unifi_network_cert_name }}"
    cert_domains: '{{ unifi_domains | unique }}'
  tags:
    - certbot

# SSL for Unifi
- block:
  - name: Convert certs for Unifi
    command: "openssl pkcs12 -export -inkey /etc/letsencrypt/live/{{ unifi_network_cert_name }}/privkey.pem -in /etc/letsencrypt/live/{{ unifi_network_cert_name }}/fullchain.pem -out /etc/letsencrypt/live/{{ unifi_network_cert_name }}/fullchain.p12 -name unifi -password pass:unifi"
    
  - name: Import cert into Unifi
    command: "keytool -importkeystore -deststorepass aircontrolenterprise -destkeypass aircontrolenterprise -destkeystore /var/lib/unifi/keystore -srckeystore /etc/letsencrypt/live/{{ unifi_network_cert_name }}/fullchain.p12 -srcstoretype PKCS12 -srcstorepass unifi  -noprompt"

  - name: Restart Unifi
    service:
      name: unifi
      state: restarted
  when: new_cert.changed | default(false)

- name: Ensure python script for installing unifi certs is updated.
  copy:
    src: unifi_cert.py
    dest: /root/unifi_cert.py
    mode: 0770

- name: Ensure renewal hook script is updated
  template:
    src: unifi_network.sh.j2
    dest: /etc/letsencrypt/renewal-hooks/post/unifi_network.sh
    mode: 0770
    owner: root
    group: '{{ cert_group }}'