- name: "Check if {{ algorithm }} DNSSEC keys exist"
  command: find /var/cache/bind/ -name "K{{ domain }}.+{{ '%03d' | format(dnssec_algorithm_ids[algorithm]|int) }}*"
  register: dnssec_files
  changed_when: dnssec_files.stdout_lines | length < 4

- block: 
  - name: 'Restore {{ algorithm }} DNSSEC keys'
    copy:
      src: '{{ item }}'
      dest: '/var/cache/bind/{{ item | basename }}'
      owner: bind
      group: bind
    with_fileglob: 
      - '{{ backup_dir }}/dns/dnssec/K{{ domain }}.+{{ "%03d" | format(dnssec_algorithm_ids[algorithm]|int) }}*'
    register: restore_dnssec
  - debug:
      var: restore_dnssec
  - name: 'Generate new {{ algorithm }} DNSSEC key'
    command: '{{ item }}'
    with_items:
      - "dnssec-keygen -b {{ dnssec_bytes }} -a {{ algorithm }} -K /var/cache/bind/ -n ZONE {{ domain }}"
      - "dnssec-keygen -b {{ dnssec_bytes }} -f KSK -a {{ algorithm }} -K /var/cache/bind/ -n ZONE {{ domain }}"
    when: restore_dnssec.skipped | default(false)
  when: dnssec_files.changed

- name: Ensure key folder permissions are correct
  file:
    state: directory
    recurse: yes
    path: /var/cache/bind/
    owner: bind
    group: bind

- name: 'Create a list of {{ algorithm }} files'
  command: find /var/cache/bind/ -name "K{{ domain }}.+{{ '%03d' | format(dnssec_algorithm_ids[algorithm]|int) }}*"
  changed_when: false
  register: dnssec_files
  failed_when: dnssec_files.stdout_lines | length < 4 

- name: 'Ensure we have a local copy of the {{ algorithm }} keys'
  fetch:
    src: '{{ item }}'
    dest: '{{ backup_dir }}/dns/dnssec/{{ item.split("/")[-1] }}'
    flat: yes
  loop: '{{ dnssec_files.stdout_lines }}'

- name: 'Create a list of {{ algorithm }} key files'
  command: find /var/cache/bind/ -name "K{{ domain }}.+{{ '%03d' | format(dnssec_algorithm_ids[algorithm]|int) }}*.key"
  register: dnssec_keys
  changed_when: false
  failed_when: dnssec_keys.stdout_lines | length < 2

- set_fact:
    domain_dnssec_keys: '{{ domain_dnssec_keys + dnssec_keys.stdout_lines }}'

- block:
  - name: Ensure the master ns has script to manage DNSSEC signing
    copy:
      src: 'dnssec_check.py'
      dest: '/root/dnssec_check.py'
  - name: Update DNSSEC script config file
    template:
        src: dnssec_domains.conf.j2
        dest: /root/.dnssec_domains.conf
  - name: Ensure DNSSEC check script cronjob entry exists.
    cron:
      minute: '00'
      hour: '17'
      name: DNSSEC check and sign script
      job: /usr/bin/python3 /root/dnssec_check.py
  when: 
    - master_ns_host | default(false)


